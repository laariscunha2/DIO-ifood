-- Criacao do banco de dados para o cenario e-commerce
-- DROP DATABASE ECOMMERCE;
CREATE DATABASE if not exists ecommerce;
USE ecommerce;

-- Criacao da tabela (CLIENTE)
CREATE TABLE clients(
					idClient INT AUTO_INCREMENT PRIMARY KEY,
                    Fname VARCHAR(10),
                    Minit CHAR(3),
                    Lname VARCHAR(20),
                    CPF CHAR(11) NOT NULL,
						CONSTRAINT unique_cpf UNIQUE (CPF),
                   Address VARCHAR(255)
                    );

ALTER TABLE clients AUTO_INCREMENT = 1;

-- Criacao da tabela (PRODUTO)
CREATE TABLE product(
					idProduct INT AUTO_INCREMENT PRIMARY KEY,
                    Pname VARCHAR(255) NOT NULL,
                    classificationKids BOOL DEFAULT FALSE,
                    Category ENUM("Eletronico", "Vestimenta", "Brinquedos", "Alimentos", "Moveis") NOT NULL,
                    Avaliacao FLOAT DEFAULT 0,
                    Size VARCHAR(10)
                    );


-- Criacao da tabela (PAGAMENTO) (nao foi criado no momento da aula)
CREATE TABLE payments(
					idClient INT,
					idPayment INT,
					typePayment ENUM("Boleto", "Cartao", "Dois Cartoes"),
					limitAvailable FLOAT,
					PRIMARY KEY (idClient, idPayment)				
					);


-- Criacao da tabela (PEDIDO)
CREATE TABLE orders(
					idOrder INT AUTO_INCREMENT PRIMARY KEY,
                    idOrderClient INT,
                    orderStatus ENUM("Cancelado", "Confirmado", "Em Processamento") DEFAULT "Em Processamento",
                    orderDescription VARCHAR(255),
                    sendValue FLOAT DEFAULT 10,
                    paymentCash BOOL DEFAULT FALSE,
                    CONSTRAINT fk_order_client FOREIGN KEY (idOrderClient) REFERENCES clients(idClient)
						ON UPDATE CASCADE
                    );


-- Criacao da tabela (ESTOQUE)
CREATE TABLE productStorage(
					idProdStorage INT AUTO_INCREMENT PRIMARY KEY,
                    storageLocation VARCHAR(255),
                    Quantity INT DEFAULT 0
                    );


-- Criacao da tabela (FORNECEDOR)
CREATE TABLE supplier(
					idSupplier INT AUTO_INCREMENT PRIMARY KEY,
                    socialName VARCHAR(255) NOT NULL,
                    CNPJ CHAR(15) NOT NULL,
                    Contact CHAR(11) NOT NULL,
                    CONSTRAINT unique_supplier UNIQUE (CNPJ) 
                    );


-- Criacao da tabela (VENDEDOR)
CREATE TABLE seller(
					idSeller INT AUTO_INCREMENT PRIMARY KEY,
                    socialName VARCHAR(255) NOT NULL,
                    abstName VARCHAR(255),
                    CNPJ CHAR(15),
                    Contact CHAR(11) NOT NULL,
                    CPF CHAR(9),
                    Location VARCHAR(255),
                    CONSTRAINT unique_cnpj_seller UNIQUE (CNPJ),
                    CONSTRAINT unique_cpf_seller UNIQUE (CPF)
                    );


-- Criacao da tabela (VENDEDOR PRODUTO)
CREATE TABLE productSeller(
					idPseller int,
					idPproduct int,
					prodQuantity int default 1,
					primary key (idPseller, idPproduct),
					constraint fk_product_seller foreign key (idPseller) references seller(idSeller),
					constraint fk_product_product foreign key (idPproduct) references product(idProduct)
					);                  
               

-- Criacao da tabela (PEDIDO PRODUTO)
CREATE TABLE productOrder(
					idPOproduct INT,
                    idPOorder INT,
                    poQuantity INT DEFAULT 1,
                    poStatus ENUM("Disponivel", "Sem Estoque") DEFAULT "Disponivel",
                    PRIMARY KEY (idPOproduct, idPOorder),
                    CONSTRAINT fk_productorder_product FOREIGN KEY (idPOproduct) REFERENCES product(idProduct),
                    CONSTRAINT fk_productorder_order FOREIGN KEY  (idPOorder) REFERENCES orders(idOrder)
                    );                    
                                        
                    
-- Criacao da tabela (LOCALIZACAO DO STORAGE)
CREATE TABLE storageLocation(
					idLproduct INT,
                    idLstorage INT,
                    Location VARCHAR(255) NOT NULL,
                    PRIMARY KEY (idLproduct, idLstorage),
                    CONSTRAINT fk_storage_location_product FOREIGN KEY (idLproduct) REFERENCES product(idProduct),
                    CONSTRAINT fk_storage_location_storage FOREIGN KEY (idLstorage) REFERENCES productStorage(idProdStorage)
                    );                       


-- Criacao da tabela (FORNECEDOR)
CREATE TABLE productSupplier(
					idPsSupplier INT,
                    idPsProduct INT,
                    Quantity INT NOT NULL,
                    PRIMARY KEY (idPsSupplier, idPsProduct),
                    CONSTRAINT fk_product_supplier_supplier FOREIGN KEY (idPsSupplier) REFERENCES supplier(idSupplier),
                    CONSTRAINT fk_product_supplier_product FOREIGN KEY (idPsProduct) REFERENCES product(idProduct)
                    );   
                    
                    
show tables;

-- Realizado para ver se tem acoes automatizadas como updade, cascade ou delete
show databases;
use information_schema;
show tables;
desc REFERENTIAL_CONSTRAINTS;
select * from REFERENTIAL_CONSTRAINTS where constraint_schema = "ecommerce";

-- ==== INSERCAO DE DADOS ====
use ecommerce;
-- Insercao na tabela (CLIENTE)
SELECT * FROM clients;    
INSERT INTO clients (Fname, Minit, Lname, CPF, Address) -- OK
			VALUES
				('Maria','M','Silva', 12346789, 'rua silva de prata 29, Carangola - Cidade das flores'),
				('Matheus','O','Pimentel', 987654321,'rua alemeda 289, Centro - Cidade das flores'),
				('Ricardo','F','Silva', 45678913,'avenida alemeda vinha 1009, Centro - Cidade das flores'),
				('Julia','S','França', 789123456,'rua lareijras 861, Centro - Cidade das flores'),
				('Roberta','G','Assis', 98745631,'avenidade koller 19, Centro - Cidade das flores'),
				('Isabela','M','Cruz', 654789123,'rua alemeda das flores 28, Centro - Cidade das flores');


-- Insercao na tabela (PRODUTO)
SELECT * FROM product;
INSERT INTO product (Pname, classificationKids, category, avaliacao, size) -- OK
			VALUES
				('Fone de ouvido',false,'Eletronico','4',null),
				('Barbie Elsa',true,'Brinquedos','3',null),
				('Body Carters',true,'Vestimenta','5',null),
				('Microfone Vedo - Youtuber',False,'Eletronico','4',null),
				('Sofá retrátil',False,'Moveis','3','3x57x80'),
				('Farinha de arroz',False,'Alimentos','2',null),
				('Fire Stick Amazon',False,'Eletronico','3',null);


-- Insercao na tabela (PEDIDO)
SELECT * FROM orders;
INSERT INTO orders (idOrderClient, orderStatus, orderDescription, sendValue, paymentCash) -- OK
			VALUES 
				(1, DEFAULT,'compra via aplicativo',null,1),
				(2, DEFAULT,'compra via aplicativo',50,0),
				(3,'Confirmado',null,null,1),
				(4, DEFAULT,'compra via web site',150,0);


-- Insercao na tabela (ESTOQUE)
SELECT * FROM productStorage;
INSERT INTO productStorage (storageLocation,quantity) -- OK
			VALUE
				('Rio de Janeiro',1000),
				('Rio de Janeiro',500),
				('São Paulo',10),
				('São Paulo',100),
				('São Paulo',10),
				('Brasília',60);


-- Insercao na tabela (FORNECEDOR)
SELECT * FROM supplier;
INSERT INTO supplier (SocialName, CNPJ, contact) -- OK
			VALUES
				('Almeida e filhos', 123456789123456,'21985474'),
				('Eletrônicos Silva',854519649143457,'21985484'),
				('Eletrônicos Valma', 934567893934695,'21975474');


-- Insercao na tabela (VENDEDOR)
SELECT * FROM seller;
INSERT INTO seller (SocialName, AbstName, CNPJ, CPF, location, contact) -- OK
			VALUES
				('Tech eletronics', null, 123456789456321, null, 'Rio de Janeiro', 219946287),
				('Botique Durgas',null,null,123456783,'Rio de Janeiro', 219567895),
				('Kids World',null,456789123654485,null,'São Paulo', 1198657484);


-- Insercao na tabela (VENDEDOR PRODUTO)
SELECT * FROM productSeller;
INSERT INTO productSeller (idPseller, idPproduct, prodQuantity) -- OK
			VALUES
				(1,6,80),
				(2,7,10);


-- Insercao na tabela (PEDIDO PRODUTO)
SELECT * FROM productOrder;
INSERT INTO productOrder(idPOproduct, idPOorder, poQuantity, poStatus) -- OK
			VALUES 
				(1,1,2,null),
				(2,1,1,null),
				(3,2,1,null);

-- Insercao na tabela (LOCALIZACAO DO STORAGE)
SELECT * FROM storageLocation;
INSERT INTO storageLocation (idLproduct, idLstorage, Location) -- OK
			VALUES 
				(1,2,'RJ'),
				(2,6,'GO');


-- Insercao na tabela (FORNECEDOR)
SELECT * FROM productSupplier;
INSERT INTO productSupplier (idPsSupplier, idPsProduct, quantity) -- OK
			VALUES 
				(1,1,500),
				(1,2,400),
				(2,4,633),
				(3,3,5),
				(2,5,10);

-- Realizando Queries
SELECT COUNT(*) FROM clients;
SELECT * FROM clients c, orders o
WHERE c.idClient = idOrderClient; 

SELECT concat(Fname, " ", Lname) AS Name, idOrder AS N_Pedido, orderStatus AS Status_Pedido
FROM clients c, orders o
WHERE c.idClient = idOrderClient;

INSERT INTO orders (idOrderClient, orderStatus, orderDescription, sendValue, paymentCash) -- OK
			VALUES 
				(2, DEFAULT,'compra via aplicativo',null,1);
                
SELECT COUNT(*) 
FROM clients c, orders o
WHERE c.idClient = idOrderClient
	GROUP BY idOrder;                

-- Recuperar pedido com produto associado
SELECT c.idClient, Fname, COUNT(*) AS Number_of_orders
FROM clients c
INNER JOIN orders o ON c.idClient = o.idOrderClient
INNER JOIN productOrder p on p.idPOorder = o.idOrder
GROUP BY c.idClient;

-- Recuperar quantos pedidos foram realizados pelos clientes
SELECT c.idClient, Fname, COUNT(*) AS Number_of_orders
FROM clients c
INNER JOIN orders o ON c.idClient = o.idOrderClient
GROUP BY c.idClient;

-- RECUPERACAO SIMPLE COM SELECT STATEMENT
SELECT * FROM product;
SELECT * FROM clients;
SELECT * FROM orders;
-- FILTRO COM WHERE STATEMENT
-- CRIACAO DE ATRIBUTOS DERIVADOS
-- DEFINICAO DE ORDENACAO DE DADOS COM ORDER BY
SELECT concat(Fname, " ", Lname) AS Name, Pname AS Product, Category, orderStatus
FROM clients, product, orders
WHERE idClient = idOrderClient and orderStatus = "Em Processamento" and idClient = idProduct
ORDER BY Product;
